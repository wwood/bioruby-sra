#!/usr/bin/env ruby

require 'optparse'
require 'bio-logger'
require 'csv'
require 'bio-commandeer'

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'bio-sra'

SCRIPT_NAME = File.basename(__FILE__); LOG_NAME = SCRIPT_NAME.gsub('.rb','')

# Parse command line options into the options hash
options = {
  :logger => 'stderr',
  :format => :sra,
  :accessions_file => nil,
  :download_all_from_study => false,
  :treat_input_as_runs => false,
  }
o = OptionParser.new do |opts|
  opts.banner = "
Usage: #{SCRIPT_NAME} <SRA_ACCESSION>

Download data from SRA \n"

  opts.on('-f', "--file FILENAME", "Provide a file of accession numbers, separated by whitespace or commas [default: not used, use the first argument <SRA_ACCESSION>]") do |f|
    options[:accessions_file] = f
  end
  opts.on('-d', '--db SRAmetaDB_PATH', "Path to the SRAmetadb downloaded from NCBI e.g. from the URL [required unless all accessions are runs (rather than e.g. studies or submissions)]") do |arg|
    options[:sradb] = arg
  end
  opts.on("--format FORMAT", "format for download [default: 'sra']") do |f|
    format_string_to_sym = {
      'sralite' => :sralite, # no longer supported by NCBI?
      'sra' => :sra,
      }
    options[:format] = format_string_to_sym[f]

    if options[:format].nil?
      raise "Unexpected file format specified '#{f}'. I require one of #{format_string_to_sym.keys.join(', ') }"
    end
  end
  opts.on("--dry-run", "Don't download any instead print the URLs to download to the command line [default: not this, do download]") do
    options[:dry_run] = true
  end

  # logger options
  opts.separator "\nVerbosity:\n\n"
  opts.on("-q", "--quiet", "Run quietly, set logging to ERROR level [default INFO]") do |q|
    Bio::Log::CLI.trace('error')
  end
  opts.on("--logger filename",String,"Log to file [default #{options[:logger] }]") do | name |
    options[:logger] = name
  end
  opts.on("--trace options",String,"Set log level [default INFO]. e.g. '--trace debug' to set logging level to DEBUG") do | s |
    Bio::Log::CLI.trace(s)
  end
end
o.parse!

if options[:accessions_file].nil? and ARGV.length == 0
  $stderr.puts o
  exit 1
end

# Setup logging
Bio::Log::CLI.logger(options[:logger]) #bio-logger defaults to STDERR not STDOUT, I disagree
log = Bio::Log::LoggerPlus.new(LOG_NAME)
Bio::Log::CLI.configure(LOG_NAME)

almost_accessions = nil
if options[:accessions_file]
  log.debug "Reading SRA accessions from file #{options[:accessions_file] }"
  almost_accessions = File.open(options[:accessions_file]).read.split(/[\s,]+/)
else
  almost_accessions = ARGV.collect{|r| r.split(/[\s,]+/)}.flatten
end
# Remove empty strings and extra digits at the end e.g. SRA029325.1 => SRA029325
accessions = almost_accessions.reject{|a| a==''}.collect{|a| a.gsub(/\.\d+$/,'')}
log.info "Read in #{accessions.length} accessions"

# Do we need to connect to the database? Only yes if there are accessions that are not runs
options[:treat_input_as_runs] = true
accessions.each do |acc|
  unless Bio::SRA::Accession.classify_accession_type(acc) == Bio::SRA::RUN
    log.debug "Found accession number #{acc} that does not appear to be a run accession, so need to connect to database" if log.debug?
    options[:treat_input_as_runs] = false
    break
  end
end

# Connect to the database if required
log.info "Connecting to database.."
unless options[:treat_input_as_runs]
  if options[:sradb]
    Bio::SRA::Connection.connect options[:sradb]
  else
    Bio::SRA::Connection.connect
  end

  # Check for connection
  begin
    s = Bio::SRA::Tables::SRA.first
  rescue
    log.error "There was a problem connecting to the database at `#{options[:sradb] }', was it specified correctly?"
    exit 2
  end
end

log.info "Collecting a list of runs to download.."
runs = []
accessions.each do |acc|
  if options[:treat_input_as_runs]
    runs.push [acc, acc]
  else
    acc_type = Bio::SRA::Accession.classify_accession_type(acc)

    # Convert Run ActiveRecords into simple accessions
    sra_runs = case acc_type
    when Bio::SRA::RUN then
      Bio::SRA::Tables::SRA.where(:run_accession => acc)
    when Bio::SRA::EXPERIMENT then
      Bio::SRA::Tables::SRA.where(:experiment_accession => acc)
    when Bio::SRA::SAMPLE then
      Bio::SRA::Tables::SRA.where(:sample_accession => acc)
    when Bio::SRA::STUDY then
      Bio::SRA::Tables::SRA.where(:study_accession => acc)
    when Bio::SRA::SUBMISSION then
      Bio::SRA::Tables::SRA.where(:submission_accession => acc)
    else
      raise "Programming error: unexpected accession type: #{acc_type}"
    end

      if sra_runs.empty?
        log.warn "Unable to find accession number #{acc} in the metadata database, skipping"
        next
      else
        log.debug "Found #{sra_runs.length} runs to download for accession number #{acc}"
      end

      sra_runs.each do |r|
        runs.push [r.run_accession, acc]
      end
    end
    end

      # Remove duplicate runs
      runs.uniq! do |run_acc|
        run_acc[0]
      end
      log.info "Found #{runs.length} unique run files to download, downloading them now.."
      num_skipped = 0
      num_downloaded = 0
      runs.each_with_index do |run_acc, index|
        run = run_acc[0]
        acc = run_acc[1]

        download_path = "#{run}.#{options[:format] }"
        log.debug "Downloading to #{download_path}"

        if File.exist?(download_path)
          log.debug "Skipping download of run #{download_path} since a file of that accession already exists"
          num_skipped += 1
          next
        end

        if run == acc
          log.info "Downloading run #{run} (#{index+1}/#{runs.length})"
        else
          log.info "Downloading run #{run} from #{acc} (#{index+1}/#{runs.length})"
        end

        url = Bio::SRA::Accession.run_download_url(run, :format => options[:format])

        num_downloaded += 1
        if options[:dry_run]
          puts url
        else
          `wget #{url.inspect}`
        end
      end
      if options[:dry_run]
        log.info "Finished printing #{num_downloaded} URLs, ignoring #{num_skipped} already downloaded"
      else
        log.info "Finished downloading #{num_downloaded}, ignoring #{num_skipped} already downloaded"
      end
